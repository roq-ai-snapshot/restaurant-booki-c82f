generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model employee {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String     @db.Uuid
  restaurant_id    String     @db.Uuid
  role             String?    @db.VarChar(255)
  salary           Int?
  hire_date        DateTime?  @db.Timestamp(6)
  termination_date DateTime?  @db.Timestamp(6)
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(255)
  description   String?    @db.VarChar(255)
  price         Int?
  restaurant_id String     @db.Uuid
  availability  Boolean?
  category      String?    @db.VarChar(255)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String     @db.Uuid
  restaurant_id    String     @db.Uuid
  reservation_time DateTime?  @db.Timestamp(6)
  number_of_people Int?
  table_number     Int?
  special_request  String?    @db.VarChar(255)
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?       @db.VarChar(255)
  location      String?       @db.VarChar(255)
  opening_hours String?       @db.VarChar(255)
  closing_hours String?       @db.VarChar(255)
  name          String        @db.VarChar(255)
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  user_id       String        @db.Uuid
  tenant_id     String        @db.VarChar(255)
  employee      employee[]
  menu          menu[]
  reservation   reservation[]
  user          user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  table         table[]
}

model table {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id        String     @db.Uuid
  table_number         Int?
  capacity             Int?
  availability         Boolean?
  location_description String?    @db.VarChar(255)
  created_at           DateTime   @default(now()) @db.Timestamp(6)
  updated_at           DateTime   @default(now()) @db.Timestamp(6)
  restaurant           restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  employee    employee[]
  reservation reservation[]
  restaurant  restaurant[]
}
